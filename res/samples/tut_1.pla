/*
				TUTORIAL 0.
				
		- Programmed Formal Grammars
		- Running a program and browsing the results

Prolan uses a simle C-like language to simulate different kind of grammars and automatons.
I try to explain this system from a very practical aspect and avoid math or precise
language specification. Rather I'll show you code, from what you can guess out the working
principle of math concepts and Prolan. Nevertheless, some comments are inevitable
(like in real life coding).

Firstly, we need to talk about Programmed Formal Grammars. Imagine it:
- There is a very limited machine, what has only a string as memory (call it M).
- The starting value of M is "S" (S as start symbol).
- One program of this machine consists of lines, what can manipulate M,
	and can jump to other lines. Eg.:
	
goto f1, f2, f3;
f1: if (S = A A)	goto f1; else goto f2;
f2: if (A = S)		goto f2; else goto f1, f3;
f3: if (S = a)		goto f3; else exit;

Explanation:
Randomly go to label f1, f2 or f3.
f1: If there is S in M, replace it with A A, then go to f1. Otherwise go to f2.
f2: If there is A in M, replace it with S, then go to f2. Otherwise go to f1 or f3.
f3: If there is S in M, replace it with a, then go to f3. Otherwise exit.

Some possible runs:
- M="S" -> M="a" // going forward skip the M=" "
- S->AA->aA->aa
- S->AA->SA->SS->AAS->AAAA->aAAA->...->aaaa

The possible outcomes: {a, aa, aaaa, aaaaaaaa, ...} (the length is 2^n)
This set is the "generated language" of the programmed grammar.
		
Firstly, just try to run this program, and browse the results.
It's a programmed grammar what generates strings with 2^n lengths.
When you run the program (press F5 or use the play button at the top left corner),
the following things happen:
- In the central panel of the window appears the mathematical definition of
  the programmed grammar (it's generated from the code).
- At the right of the window:
	- List view: you can play around with one derivation's steps.
		- Try to click on a row and modify the step (not every step is modifiable).
		- Watch the colored characters and guess out the meanings...
		- To generate another derivation press F5 again.
		- Press the play button at List view to "play" an animated derivation.
	- Tree view: browse the possible derivations.
	- Language view: check out the generated language.
*/

#pragma leftmost
#include "math.pla"
start S;
term a;

void fact(nterm A, nterm B)
{
	while (B = B)
	{
		mul(A, B);
		B = eps;
	}
}

void main()
{
	nterm X, N;
	S = X N N N; // calculates 3!. change the number of N's and run again.
	fact(X, N);
	all X = a; // the result will be "a a a a a a"
}