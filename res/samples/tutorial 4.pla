/*
				TUTORIAL 3.
				
		- macros
		- local symbols
		- while
		- all
		
On the end of the day, every command will be translated to grammar rules.
Therefore every command manipulates the current sentential form (CSF).
In other words, a Prolan program has only one variable (the CSF),
and every command manipulates this variable. The program doesn't have 
other memory, hence there is no stack, and no functions.

What we have is only macro. The syntax is like C functions, eg.:
	void apple(nterm X, nterm Y) {...}
But the compilation is just a macro substitution.
The parameters are must be nterm (nonterminal symbol).
Hence when you call the macro, you can pass only nterm's
(this restriction should be removed later).
*/

start S; // CSF := S

// this macro duplicates the number of a symbol in the CSF
void duplicate(nterm A)
{
	nterm B;		// declare local symbol
	while (A = A)		// while there is A in CSF
	{
		A = B B;	// replace one A to B B
	}
	// replace all B's to A's. it's just a syntactic sugar for
	// while (B = A) { }
	all B = A;		
}

void main()
{
	term a;
	nterm X;
	S = X X;		// CSF := X X
	duplicate(X);		// CSF := X X X X
	all X = a;		// CSF := a a a a
}