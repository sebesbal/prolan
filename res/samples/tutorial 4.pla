#pragma leftmost
start S; term a, b;

/*
				TUTORIAL 4.
				
		- Formal Grammars (hereinafter FG)
		- try
		- square brackets
		
FG is a special PG. It doesn't have labels and gotos.
It has only replacing rules, and tries to apply them in random order. Eg.:
[
	S = S S;
	S = a S b;
	S = eps; // "eps" means empty string
]

Some possible runs:
- S->aSb->ab
- S->SS->...->abab
- S->aSb->aSSb->aababb

To simulate this behavior, we can write a PG:
*/

void example_4_1()
{
f0:	f1, f2, f3;
f1:	if (S = S S)	f0;	else f0;
f2:	if (S = a S b)	f0;	else f0;
f3:	if (S = eps)	f0;	else f0;
}

// The "try" is for avoid exit on the case of failed replacing:
void example_4_2()
{
f0:	f1, f2, f3;
f1:	try S = S S;		f0;
f2:	try S = a S b;		f0;
f3:	try S = eps;		f0;
}

// And finally, the most simpler equivalent form with square brackets.
// It's an infinite loop what tries to execute a randomly choosen line.
void example_4_3()
[
	S = S S;
	S = a S b;
	S = eps;
]

void main()
{
	example_4_1();
	//example_4_2();
	//example_4_3();
}